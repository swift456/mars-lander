This file will track progression through the Mars Lander Simulator Game project.
This diary will be updated atleast once a week, however entries should be made whenever a retrospective is carried out.(Retrospective posts could be listed seperately.)

Week 1 (02/02/2023)

I began by looking at literature and media to do with my project. The core principle of this project is to make a game/simulation that educates people(children/teenagers). In education this is called gamification. I decided to look for papers that cover the effects of gamification and whether it is useful in education. I plan to investigate this further and will add issues on my repo to document these outstanding tasks.

I looked at what space agencies around the world are doing to educate children about space missions, more specifically Mars Missions. The outcome of this research was that ESA, UKSA, and NASA are not utilising much gamification in order to drive education of children. An interesting excerpt I pulled from ESA's website on outreach displays exactly why this project is important "the fundamental role Education plays not only to prepare the future workforce that will turn Europeâ€™s space strategy and ambitions into reality". 

My next area of investigation was into what games have been made that display this space mission simulator concept. I found a game called Mars Horizon which has been developed with input from ESA and the UK Space Agency. At a cursory glance this game allows a player to choose the seperate parts of their launch vehicle, and payload. It also gives the player the ability to build their space center the way they want to. These features are most likely out of scope for what can be completed over the course of the project, however, it is interesting to consider the deeper knowledge about space missions that is being imparted from these features (Launch vehicles are different, and the facilities all have specific functions!). Lastly I looked at a game called Kerbal Space Program. This game is a very good representation of the processes and techniques that are used to get a science payload from Earth to Mars for example. The only downside to this game is its fictional setting. The solar system in this game is a loose representation of ours, with Mars being represented by a planet called Duna. This also means that details such as atmospheric pressure, gravity, atmospheric consistency, and scale are either not modelled or modelled differently to counterparts in our solar system.

My last area of investigation consisted of looking at how I would develop my project. I had originally planned to utilise Unity, however decided to look into a game engine I had heard about some time ago, but never looked into extensively. This game engine is Godot, and so far I feel posistive about utilising it to carry out my project however investigation into alternatives is still required.

When it comes to planning how to carry out the development of my project I have yet to come to a conclusion. I hope after a meeting with my Project Supervisor I can narrow down my options.

Week 1 (07/02/23)

In the first week of the project I focused on completing the project outline. As of yet most of the outline is slated for review, with the annotated bibliography the only item left. I have not yet begun reviewing papers and articles to do with gamification, however I have had good ideas from my discussion with my supervisor. I have moved towards using a Kanban board to track progress made through the project, I will probably compliment this with a weekly integration cycle. Moving forwards, I will be completing my look at relevant literature, and completing tutorials and demos available for Godot and Unity, to make a decision between the two.

Week 2 (08/02/23)

I have started looking at Godot, by going through and following the tutorials that are available on the Godot site. So far, Godot works by creating "scenes" which are collections of nodes. The nodes are defined from inside the game engine and are provided to the developer with pre-defined behaviour and attributes, for example, a ball node is made up of a sprite node (for a texture) and a collision node (for physics and collisions). Scripting in GDScript or C# is then used to extend the functionality of these nodes/scenes. In the first tutorial I used GDScript to move and rotate the Godot icon around the screen.
The results of my work here can be seen on my gitlab repo, under Prototyping, with GodotTest2Win/Linux being available.

Week 2 (14/02/23)

Most of this week has been spent on further familarising myself with Godot. Currently I have identified one aspect of the technical work which may prove troublesome. I want to model the atmospheric effects on the lander, namely the reduction in speed due to air resistance. In order to show this effect I have came up with two possible implementations. One of these implementations would be setting the gravity setting in Godot's physics engine to something much higher than what would be expected. This would simulate the flight through upper martian atmosphere, where there is less atmosphere to slow the lander. As the craft flies, the player will have to use "micro-thrusters" to control the roll of the lander as it is entering through the atmosphere (if lander flips while entering through atmosphere, heat generated by air resistance will damage the craft). A timer node could be utilised, to send out a signal(event) every .1 seconds that reduces the gravity variable, until this gravity variable reaches an amount which would simulate flight in a consistent atmospheric density (such as "surface atmospheric density"). The other implementation utilises Area2D nodes, which set out a signal when another node enters their boundaries. This could be used to activate an upward force on the craft (drag) similar to how a rocket thruster would affect the movement of the lander, however this force should not be able to effect the trajectory of the lander. Overall I am not confident that I will be able to model accurate atmospheric and gravitational forces that simulate the real world, however I hope to provide a depiction that provides a useful insight to how forces on Mars effect things we send there.

Week 3 (16/02/23)

This week I worked on implementing a parachute system. So far the parachute deploys, and slows the craft down gradually. When instancing the parachute I have limited it to instance only one parachute. I did this through adding an if statement under the if statement to detect for the spacebar being pressed, that only executes if the boolean "instancing" is true. "instancing" is defined as true outside of the _process function, and when the instance is generated this condition is set to 'false'. Overall I am feeling more confident than last week, and I am gradually starting to build my skill up when it comes to Godot scripting. I need to get on top of documentation, and try to adopt a flexible yet consistent schedule that allows me to complete work in sprint-like sessions. Items of documentation I want to complete are; A list of functional requirements, a use-case diagram, a writeup of findings to do with atmospheric and gravitational properities of Mars, and a brief writeup of past missions to mars, and what space agencies are doing for outreach.

Week 3  (22/02/2023)

During this week I have completed the parachute system to a point where it still needs tweaking but is in an acceptable state for now. After discussions with my supervisor I have made the decision to reorganise the structure of my code, so that an Finite State Machine can be used to handle the different conditional behaviour of the lander object. This has gone very wll, and I feel I am in a good position to develop further prototype code, so that eventually all of these aspects can be brought together into a finalised product. Before changing the code to implement an FSM I created a state diagram along with a use-case diagram so that I could think about the behaviour that needs to link the transistions between States. Functional Requirements should be relatively easy to discern due to the afforementioned state and use case diagrams.

Week 4 (25/02/2023)

The previous weeks of prototyping have been incredibly useful for me. I have been able to learn and further test the things I have learned in Godot. I have changed the parachute system so that after the parachute has been deployed, the game remains in the state of "PARACHUTE_USED" meaning the parachute cannot be deployed again. I need to test that when the game enters a new state such as DESTROYED that the parachute cannot be deployed from. Currently my input for parachute only goes through depending on the current state. This is so that the spacebar can be used for deployment and cutting of the parachute.

Week 5 (05/03/2023)

After discussion with my supervisor I have altered the way in which forces function in my game. Before this week, the physics engine was managing everything, and I was only able to simulate the effect of a parachute deployment by altering the linear damping factor. This is an approximation that the physics engine uses to simulate an atmosphere being thicker/thinner. The default option is 1, I was increasing the damping factor to 4 when a parachute was deployed as this looked like the effect I wanted. This however was too loose of an approximation for my supervisor, whom I agreed with, it was a very shakey representation of the forces at play. My supervisor had looked into godot, even reading many of the forum posts and documentation I have. We agreed that an accurate representation of real life forces would be next-to impossible due to the 2D physics engine operating through pixels and pixels per second. I had discovered in the early stages of my investigation that the 3D engine utilisies real world metrics, such as meters and meters per second. This would mean that something like a drag coefficient calculation would be incredibly easy to translate into the game, however I originally discounted development through 3D as I assumed it may be too difficult. However, I feel I am at a stage in my project where, I have good experience with godot scripting, to the point where I feel I could recreate the game I have right now in 2D. There would however be a caveat with this, I would probably use a 2D perspective in the 3D engine, as to not complicate things. This however does leave the 3D aspect open for use if I find purpose for it, i.e. changing the perspective of the landing craft (downward facing camera). On a different topic, I also discussed with my supervisor the prospect of interviewing the departments outreach officer. This may provide useful insights into what makes a good education tool. I also may carry out playtests with people who are currently working to complete their degree in game development and design.
